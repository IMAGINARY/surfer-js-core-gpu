gsave();
if(aspectRatio > 1.0,scale(1.0/aspectRatio));

//the following is executed for every rendered frame
if (dragging,
    dx = 3 * (sx - mouse().x); dy = 3 * (sy - mouse().y);,
    dx = .9*dx; dy = .9*dy;
);

sx = mouse().x;
sy = mouse().y;

//the rotation matrix: It is modified either if the user is dragging or time passes
mat = mat * (
    (1, 0, 0),
    (0, cos(dy), -sin(dy)),
    (0, sin(dy), cos(dy))
) * (
    (cos(dx), 0, -sin(dx)),
    (0, 1, 0),
    (sin(dx), 0, cos(dx))
);


//configuration for the lights in the scene. A light has a position, a gamma-parameter for its shininess and a color
lightdirs = [
    ray((.0, .0), -100), //enlights parts of the surface which normal points away from the camera
    ray((.0, .0), -100),
    ray((.0, .0), 100), //Has an effect, if the normal of the surface points to the camera
    ray((.0, .0), 100),
    (-10, 10, -2.),
    (10, -8, 3.)
];

gamma = [1, 10, 1, 10, 5, 5];

        
colors = [
    (.3, .5, 1.),
    (1, 2, 2) / 2,
    (1., 0.2, 0.1),
    (2, 2, 1) / 2,
    .9 * (.7, .8, .3),
    .9 * (.6, .1, .6)
];


// translucent surface: find all roots from back to front
// opaque surface: stop after first root has been found
findAllRoots = alpha < .99;


colorplot(
  spolyvalues = apply([-2, 0, 2], v, S(ray(#, v))); //evaluate S along ray
  spoly = B3 * spolyvalues;                         //interpolate to monomial basis
  D = (spoly_2 * spoly_2) - 4. * spoly_3 * spoly_1; //discriminant of spoly
  
  color = (0., 0., 0., 0.); // background color: fully transparent
  if (D >= 0, //ray intersects ball
    color = computeColor(
      #, 
      (-spoly_2 - re(sqrt(D))) / (2 * spoly_3), //intersection entering the ball
      (-spoly_2 + re(sqrt(D))) / (2 * spoly_3), //intersection leaving the ball
      color
    );              
  );
  color //return value: WebGL uses premultiplied alpha by default for RGBA which is already our internal representation!!!
); //render the scene. # is the pixel coordinate

grestore();

// loop animation if there is motion (and we are not dragging), otherwise stop
if(dragging % |(dx,dy)|>.0001, playanimation(), pauseanimation());
